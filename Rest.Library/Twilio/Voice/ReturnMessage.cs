// <auto-generated />
//
// From: https://app.quicktype.io/
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using OfficeClip.OpenSource.Integration.Rest.Library.Twilio.Voice;
//
//    var returnMessage = ReturnMessage.FromJson(jsonString);

namespace OfficeClip.OpenSource.Integration.Rest.Library.Twilio.Voice
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ReturnMessage
    {
        [JsonProperty("account_sid")]
        public string AccountSid { get; set; }

        [JsonProperty("annotation")]
        public object Annotation { get; set; }

        [JsonProperty("answered_by")]
        public object AnsweredBy { get; set; }

        [JsonProperty("api_version")]
        public DateTimeOffset ApiVersion { get; set; }

        [JsonProperty("caller_name")]
        public object CallerName { get; set; }

        [JsonProperty("date_created")]
        public string DateCreated { get; set; }

        [JsonProperty("date_updated")]
        public string DateUpdated { get; set; }

        [JsonProperty("direction")]
        public string Direction { get; set; }

        [JsonProperty("duration")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Duration { get; set; }

        [JsonProperty("end_time")]
        public string EndTime { get; set; }

        [JsonProperty("forwarded_from")]
        public string ForwardedFrom { get; set; }

        [JsonProperty("from")]
        public string From { get; set; }

        [JsonProperty("from_formatted")]
        public string FromFormatted { get; set; }

        [JsonProperty("group_sid")]
        public object GroupSid { get; set; }

        [JsonProperty("parent_call_sid")]
        public object ParentCallSid { get; set; }

        [JsonProperty("phone_number_sid")]
        public string PhoneNumberSid { get; set; }

        [JsonProperty("price")]
        public string Price { get; set; }

        [JsonProperty("price_unit")]
        public string PriceUnit { get; set; }

        [JsonProperty("sid")]
        public string Sid { get; set; }

        [JsonProperty("start_time")]
        public string StartTime { get; set; }

        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("subresource_uris")]
        public SubresourceUris SubresourceUris { get; set; }

        [JsonProperty("to")]
        public string To { get; set; }

        [JsonProperty("to_formatted")]
        public string ToFormatted { get; set; }

        [JsonProperty("trunk_sid")]
        public object TrunkSid { get; set; }

        [JsonProperty("uri")]
        public string Uri { get; set; }

        [JsonProperty("queue_time")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long QueueTime { get; set; }
    }

    public partial class SubresourceUris
    {
        [JsonProperty("notifications")]
        public string Notifications { get; set; }

        [JsonProperty("recordings")]
        public string Recordings { get; set; }

        [JsonProperty("feedback")]
        public string Feedback { get; set; }

        [JsonProperty("feedback_summaries")]
        public string FeedbackSummaries { get; set; }

        [JsonProperty("payments")]
        public string Payments { get; set; }

        [JsonProperty("events")]
        public string Events { get; set; }
    }

    public partial class ReturnMessage
    {
        public static ReturnMessage FromJson(string json) => JsonConvert.DeserializeObject<ReturnMessage>(json, OfficeClip.OpenSource.Integration.Rest.Library.Twilio.Voice.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ReturnMessage self) => JsonConvert.SerializeObject(self, OfficeClip.OpenSource.Integration.Rest.Library.Twilio.Voice.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new System.Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
